{"swaggerVersion": "1.2", "apiVersion": "1.0", "basePath": "http://localhost:8083/rest", "resourcePath": "/db", "produces": ["application/json", "application/xml"], "consumes": ["application/json", "application/xml"], "apis": [
    {
        "path": "/db",
        "description": "Operations available for database tables.",
        "operations": [
            {
                "method": "GET",
                "summary": "getResources() - List all resources.",
                "nickname": "getResources",
                "notes": "List the names of the available tables in this storage. ",
                "type": "Resources",
                "event_name": ["db.list"],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "GET",
                "summary": "getTables() - List all table names.",
                "nickname": "getTables",
                "notes": "List the table names in this storage, return as an array.",
                "type": "ComponentList",
                "event_name": ["db.list"],
                "parameters": [
                    {
                        "name": "names_only",
                        "description": "Return only the names of the tables in an array.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": true,
                        "default": true
                    },
                    {
                        "name": "include_schemas",
                        "description": "Also return the names of the tables where the schema is retrievable.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": true,
                        "default": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "GET",
                "summary": "getAccessComponents() - List all role accessible components.",
                "nickname": "getAccessComponents",
                "notes": "List the names of all the role accessible components.",
                "type": "ComponentList",
                "event_name": ["db.list"],
                "parameters": [
                    {
                        "name": "as_access_components",
                        "description": "Return the names of all the accessible components.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": true,
                        "default": true
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            }
        ]
    },
    {
        "path": "/db/{table_name}",
        "description": "Operations for table records administration.",
        "operations": [
            {
                "method": "GET",
                "summary": "getRecordsByFilter() - Retrieve one or more records by using a filter.",
                "nickname": "getRecordsByFilter",
                "notes": "Set the <b>filter</b> parameter to a SQL WHERE clause (optional native filter accepted in some scenarios) to limit records returned or leave it blank to return all records up to the maximum limit.<br/> Set the <b>limit</b> parameter with or without a filter to return a specific amount of records.<br/> Use the <b>offset</b> parameter along with the <b>limit</b> parameter to page through sets of records.<br/> Set the <b>order</b> parameter to SQL ORDER_BY clause containing field and optional direction (<field_name> [ASC|DESC]) to order the returned records.<br/> Alternatively, to send the <b>filter</b> with or without <b>params</b> as posted data, use the getRecordsByPost() POST request and post a filter with or without params.<br/>Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to limit properties returned for each record. By default, all fields are returned for all records. ",
                "type": "RecordsResponse",
                "event_name": ["db.{table_name}.select", "db.table_selected"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "filter",
                        "description": "SQL WHERE clause filter to limit the records retrieved.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "description": "Maximum number of records to return.",
                        "allowMultiple": false,
                        "type": "integer",
                        "format": "int32",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "offset",
                        "description": "Offset the filter results to a particular record index (may require <b>order</b>> parameter in some scenarios).",
                        "allowMultiple": false,
                        "type": "integer",
                        "format": "int32",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "order",
                        "description": "SQL ORDER_BY clause containing field and direction for filter results.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "include_count",
                        "description": "Include the total number of filter results as meta data.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "include_schema",
                        "description": "Include table properties, including indexes and field details where available, as meta data.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "GET",
                "summary": "getRecordsByIds() - Retrieve one or more records by identifiers.",
                "nickname": "getRecordsByIds",
                "notes": "Pass the identifying field values as a comma-separated list in the <b>ids</b> parameter.<br/> Use the <b>id_field</b> and <b>id_type</b> parameters to override or specify detail for identifying fields where applicable.<br/> Alternatively, to send the <b>ids</b> as posted data, use the getRecordsByPost() POST request.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to limit properties returned for each record. By default, all fields are returned for identified records. ",
                "type": "RecordsResponse",
                "event_name": ["db.{table_name}.select", "db.table_selected"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "ids",
                        "description": "Comma-delimited list of the identifiers of the records to retrieve.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": true
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_field",
                        "description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_type",
                        "description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "continue",
                        "description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "POST",
                "summary": "getRecordsByPost() - Retrieve one or more records by posting necessary data.",
                "nickname": "getRecordsByPost",
                "notes": "Post data should be an array of records wrapped in a <b>record</b> element - including the identifying fields at a minimum, or a <b>filter</b> in the SQL or other appropriate formats with or without a replacement <b>params</b> array, or a list of <b>ids</b> in a string list or an array.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to limit properties returned for each record. By default, all fields are returned for identified records. ",
                "type": "RecordsResponse",
                "event_name": ["db.{table_name}.select", "db.table_selected"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "description": "Data containing name-value pairs of records to retrieve.",
                        "allowMultiple": false,
                        "type": "GetRecordsRequest",
                        "paramType": "body",
                        "required": true
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_field",
                        "description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_type",
                        "description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "continue",
                        "description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "X-HTTP-METHOD",
                        "description": "Override request using POST to tunnel other http request, such as GET.",
                        "enum": ["GET"],
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "header",
                        "required": true
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "GET",
                "summary": "getRecords() - Retrieve one or more records.",
                "nickname": "getRecords",
                "notes": "Here for SDK backwards compatibility, see getRecordsByFilter(), getRecordsByIds(), and getRecordsByPost()",
                "type": "RecordsResponse",
                "event_name": ["db.{table_name}.select", "db.table_selected"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "ids",
                        "description": "Comma-delimited list of the identifiers of the records to retrieve.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "filter",
                        "description": "SQL-like filter to limit the records to retrieve.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "description": "Set to limit the filter results.",
                        "allowMultiple": false,
                        "type": "integer",
                        "format": "int32",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "offset",
                        "description": "Set to offset the filter results to a particular record count.",
                        "allowMultiple": false,
                        "type": "integer",
                        "format": "int32",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "order",
                        "description": "SQL-like order containing field and direction for filter results.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "include_count",
                        "description": "Include the total number of filter results as meta data.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "include_schema",
                        "description": "Include the table schema as meta data.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_field",
                        "description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_type",
                        "description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "continue",
                        "description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "POST",
                "summary": "createRecords() - Create one or more records.",
                "nickname": "createRecords",
                "notes": "Posted data should be an array of records wrapped in a <b>record</b> element.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> By default, only the id property of the record is returned on success. Use <b>fields</b> parameter to return more info.",
                "type": "RecordsResponse",
                "event_name": ["db.{table_name}.insert", "db.table_inserted"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "description": "Data containing name-value pairs of records to create.",
                        "allowMultiple": false,
                        "type": "RecordsRequest",
                        "paramType": "body",
                        "required": true
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_field",
                        "description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_type",
                        "description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "continue",
                        "description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "rollback",
                        "description": "In batch scenarios, where supported, rollback all changes if any record of the batch fails. Default behavior is to halt and return results up to the first point of failure, leaving any changes.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "X-HTTP-METHOD",
                        "description": "Override request using POST to tunnel other http request, such as DELETE.",
                        "enum": ["GET", "PUT", "PATCH", "DELETE"],
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "header",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "PUT",
                "summary": "replaceRecordsByIds() - Update (replace) one or more records.",
                "nickname": "replaceRecordsByIds",
                "notes": "Posted body should be a single record with name-value pairs to update wrapped in a <b>record</b> tag.<br/> Ids can be included via URL parameter or included in the posted body.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> By default, only the id property of the record is returned on success. Use <b>fields</b> parameter to return more info.",
                "type": "RecordsResponse",
                "event_name": ["db.{table_name}.update", "db.table_updated"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "description": "Data containing name-value pairs of records to update.",
                        "allowMultiple": false,
                        "type": "IdsRecordRequest",
                        "paramType": "body",
                        "required": true
                    },
                    {
                        "name": "ids",
                        "description": "Comma-delimited list of the identifiers of the records to modify.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_field",
                        "description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_type",
                        "description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "continue",
                        "description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "rollback",
                        "description": "In batch scenarios, where supported, rollback all changes if any record of the batch fails. Default behavior is to halt and return results up to the first point of failure, leaving any changes.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "PUT",
                "summary": "replaceRecordsByFilter() - Update (replace) one or more records.",
                "nickname": "replaceRecordsByFilter",
                "notes": "Posted body should be a single record with name-value pairs to update wrapped in a <b>record</b> tag.<br/> Filter can be included via URL parameter or included in the posted body.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> By default, only the id property of the record is returned on success. Use <b>fields</b> parameter to return more info.",
                "type": "RecordsResponse",
                "event_name": ["db.{table_name}.update", "db.table_updated"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "description": "Data containing name-value pairs of records to update.",
                        "allowMultiple": false,
                        "type": "FilterRecordRequest",
                        "paramType": "body",
                        "required": true
                    },
                    {
                        "name": "filter",
                        "description": "SQL-like filter to limit the records to modify.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "PUT",
                "summary": "replaceRecords() - Update (replace) one or more records.",
                "nickname": "replaceRecords",
                "notes": "Post data should be an array of records wrapped in a <b>record</b> tag.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> By default, only the id property of the record is returned on success. Use <b>fields</b> parameter to return more info.",
                "type": "RecordsResponse",
                "event_name": ["db.{table_name}.update", "db.table_updated"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "description": "Data containing name-value pairs of records to update.",
                        "allowMultiple": false,
                        "type": "RecordsRequest",
                        "paramType": "body",
                        "required": true
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_field",
                        "description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_type",
                        "description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "continue",
                        "description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "rollback",
                        "description": "In batch scenarios, where supported, rollback all changes if any record of the batch fails. Default behavior is to halt and return results up to the first point of failure, leaving any changes.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "PATCH",
                "summary": "updateRecordsByIds() - Update (patch) one or more records.",
                "nickname": "updateRecordsByIds",
                "notes": "Posted body should be a single record with name-value pairs to update wrapped in a <b>record</b> tag.<br/> Ids can be included via URL parameter or included in the posted body.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> By default, only the id property of the record is returned on success. Use <b>fields</b> parameter to return more info.",
                "type": "RecordsResponse",
                "event_name": ["db.{table_name}.update", "db.table_updated"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "description": "A single record containing name-value pairs of fields to update.",
                        "allowMultiple": false,
                        "type": "IdsRecordRequest",
                        "paramType": "body",
                        "required": true
                    },
                    {
                        "name": "ids",
                        "description": "Comma-delimited list of the identifiers of the records to modify.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_field",
                        "description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_type",
                        "description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "continue",
                        "description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "rollback",
                        "description": "In batch scenarios, where supported, rollback all changes if any record of the batch fails. Default behavior is to halt and return results up to the first point of failure, leaving any changes.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "PATCH",
                "summary": "updateRecordsByFilter() - Update (patch) one or more records.",
                "nickname": "updateRecordsByFilter",
                "notes": "Posted body should be a single record with name-value pairs to update wrapped in a <b>record</b> tag.<br/> Filter can be included via URL parameter or included in the posted body.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> By default, only the id property of the record is returned on success. Use <b>fields</b> parameter to return more info.",
                "type": "RecordsResponse",
                "event_name": ["db.{table_name}.update", "db.table_updated"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "description": "Data containing name-value pairs of fields to update.",
                        "allowMultiple": false,
                        "type": "FilterRecordRequest",
                        "paramType": "body",
                        "required": true
                    },
                    {
                        "name": "filter",
                        "description": "SQL-like filter to limit the records to modify.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "PATCH",
                "summary": "updateRecords() - Update (patch) one or more records.",
                "nickname": "updateRecords",
                "notes": "Post data should be an array of records containing at least the identifying fields for each record.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> By default, only the id property of the record is returned on success. Use <b>fields</b> parameter to return more info.",
                "type": "RecordsResponse",
                "event_name": ["db.{table_name}.update", "db.table_updated"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "description": "Data containing name-value pairs of records to update.",
                        "allowMultiple": false,
                        "type": "RecordsRequest",
                        "paramType": "body",
                        "required": true
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_field",
                        "description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_type",
                        "description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "continue",
                        "description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "rollback",
                        "description": "In batch scenarios, where supported, rollback all changes if any record of the batch fails. Default behavior is to halt and return results up to the first point of failure, leaving any changes.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "DELETE",
                "summary": "deleteRecordsByIds() - Delete one or more records.",
                "nickname": "deleteRecordsByIds",
                "notes": "Set the <b>ids</b> parameter to a list of record identifying (primary key) values to delete specific records.<br/> Alternatively, to delete records by a large list of ids, pass the ids in the <b>body</b>.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> By default, only the id property of the record is returned on success, use <b>fields</b> to return more info. ",
                "type": "RecordsResponse",
                "event_name": ["db.{table_name}.delete", "db.table_deleted"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "ids",
                        "description": "Comma-delimited list of the identifiers of the records to delete.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "body",
                        "description": "Data containing ids of records to delete.",
                        "allowMultiple": false,
                        "type": "IdsRequest",
                        "paramType": "body",
                        "required": false
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_field",
                        "description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_type",
                        "description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "continue",
                        "description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "rollback",
                        "description": "In batch scenarios, where supported, rollback all changes if any record of the batch fails. Default behavior is to halt and return results up to the first point of failure, leaving any changes.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "DELETE",
                "summary": "deleteRecordsByFilter() - Delete one or more records by using a filter.",
                "nickname": "deleteRecordsByFilter",
                "notes": "Set the <b>filter</b> parameter to a SQL WHERE clause to delete specific records, otherwise set <b>force</b> to true to clear the table.<br/> Alternatively, to delete by a complicated filter or to use parameter replacement, pass the filter with or without params as the <b>body</b>.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> By default, only the id property of the record is returned on success, use <b>fields</b> to return more info. ",
                "type": "RecordsResponse",
                "event_name": ["db.{table_name}.delete", "db.table_deleted"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "filter",
                        "description": "SQL WHERE clause filter to limit the records deleted.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "body",
                        "description": "Data containing filter and/or params of records to delete.",
                        "allowMultiple": false,
                        "type": "FilterRequest",
                        "paramType": "body",
                        "required": false
                    },
                    {
                        "name": "force",
                        "description": "Set force to true to delete all records in this table, otherwise <b>filter</b> parameter is required.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false,
                        "default": false
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "DELETE",
                "summary": "deleteRecords() - Delete one or more records.",
                "nickname": "deleteRecords",
                "notes": "Set the <b>body</b> to an array of records, minimally including the identifying fields, to delete specific records.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> By default, only the id property of the record is returned on success, use <b>fields</b> to return more info. ",
                "type": "RecordsResponse",
                "event_name": ["db.{table_name}.delete", "db.table_deleted"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "description": "Data containing name-value pairs of records to delete.",
                        "allowMultiple": false,
                        "type": "RecordsRequest",
                        "paramType": "body",
                        "required": true
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_field",
                        "description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_type",
                        "description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "continue",
                        "description": "In batch scenarios, where supported, continue processing even after one record fails. Default behavior is to halt and return results up to the first point of failure.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "rollback",
                        "description": "In batch scenarios, where supported, rollback all changes if any record of the batch fails. Default behavior is to halt and return results up to the first point of failure, leaving any changes.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "filter",
                        "description": "For SDK backwards compatibility.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "ids",
                        "description": "For SDK backwards compatibility.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            }
        ]
    },
    {
        "path": "/db/{table_name}/{id}",
        "description": "Operations for single record administration.",
        "operations": [
            {
                "method": "GET",
                "summary": "getRecord() - Retrieve one record by identifier.",
                "nickname": "getRecord",
                "notes": "Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to limit properties that are returned. By default, all fields are returned.",
                "type": "RecordResponse",
                "event_name": ["db.{table_name}.select", "db.table_selected"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "id",
                        "description": "Identifier of the record to retrieve.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for the record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_field",
                        "description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_type",
                        "description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "POST",
                "summary": "createRecord() - Create one record with given identifier.",
                "nickname": "createRecord",
                "notes": "Post data should be an array of fields for a single record.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to return more properties. By default, the id is returned.",
                "type": "RecordResponse",
                "event_name": ["db.{table_name}.create", "db.table_created"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "id",
                        "description": "Identifier of the record to create.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "description": "Data containing name-value pairs of the record to create.",
                        "allowMultiple": false,
                        "type": "RecordRequest",
                        "paramType": "body",
                        "required": true
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_field",
                        "description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_type",
                        "description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "PUT",
                "summary": "replaceRecord() - Replace the content of one record by identifier.",
                "nickname": "replaceRecord",
                "notes": "Post data should be an array of fields for a single record.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to return more properties. By default, the id is returned.",
                "type": "RecordResponse",
                "event_name": ["db.{table_name}.update", "db.table_updated"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "id",
                        "description": "Identifier of the record to update.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "description": "Data containing name-value pairs of the replacement record.",
                        "allowMultiple": false,
                        "type": "RecordRequest",
                        "paramType": "body",
                        "required": true
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_field",
                        "description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_type",
                        "description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "PATCH",
                "summary": "updateRecord() - Update (patch) one record by identifier.",
                "nickname": "updateRecord",
                "notes": "Post data should be an array of fields for a single record.<br/> Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to return more properties. By default, the id is returned.",
                "type": "RecordResponse",
                "event_name": ["db.{table_name}.update", "db.table_updated"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "The name of the table you want to update.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "id",
                        "description": "Identifier of the record to update.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "description": "Data containing name-value pairs of the fields to update.",
                        "allowMultiple": false,
                        "type": "RecordRequest",
                        "paramType": "body",
                        "required": true
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_field",
                        "description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_type",
                        "description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "DELETE",
                "summary": "deleteRecord() - Delete one record by identifier.",
                "nickname": "deleteRecord",
                "notes": "Use the <b>related</b> parameter to return related records for each resource. By default, no related records are returned.<br/> Use the <b>fields</b> parameter to return more deleted properties. By default, the id is returned.",
                "type": "RecordResponse",
                "event_name": ["db.{table_name}.delete", "db.table_deleted"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "id",
                        "description": "Identifier of the record to delete.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "fields",
                        "description": "Comma-delimited list of field names to retrieve for each record, '*' to return all fields.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_field",
                        "description": "Single or comma-delimited list of the fields used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "id_type",
                        "description": "Single or comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    },
                    {
                        "name": "related",
                        "description": "Comma-delimited list of relationship names to retrieve for each record, or '*' to retrieve all.",
                        "allowMultiple": true,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            }
        ]
    },
    {
        "path": "/db/_schema",
        "description": "Operations available for SQL DB Schemas.",
        "operations": [
            {
                "method": "GET",
                "summary": "getSchemas() - List resources available for database schema.",
                "nickname": "getSchemas",
                "type": "Resources",
                "event_name": ["db._schema.list"],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ],
                "notes": "See listed operations for each resource available."
            },
            {
                "method": "POST",
                "summary": "createTables() - Create one or more tables.",
                "nickname": "createTables",
                "type": "Resources",
                "event_name": ["db._schema.create"],
                "parameters": [
                    {
                        "name": "tables",
                        "description": "Array of table definitions.",
                        "allowMultiple": false,
                        "type": "TableSchemas",
                        "paramType": "body",
                        "required": true
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ],
                "notes": "Post data should be a single table definition or an array of table definitions."
            },
            {
                "method": "PUT",
                "summary": "replaceTables() - Update (replace) one or more tables.",
                "nickname": "replaceTables",
                "event_name": ["db._schema.alter"],
                "type": "Resources",
                "parameters": [
                    {
                        "name": "tables",
                        "description": "Array of table definitions.",
                        "allowMultiple": false,
                        "type": "TableSchemas",
                        "paramType": "body",
                        "required": true
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ],
                "notes": "Post data should be a single table definition or an array of table definitions."
            },
            {
                "method": "PATCH",
                "summary": "updateTables() - Update (patch) one or more tables.",
                "nickname": "updateTables",
                "event_name": ["db._schema.alter"],
                "type": "Resources",
                "parameters": [
                    {
                        "name": "tables",
                        "description": "Array of table definitions.",
                        "allowMultiple": false,
                        "type": "TableSchemas",
                        "paramType": "body",
                        "required": true
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ],
                "notes": "Post data should be a single table definition or an array of table definitions."
            }
        ]
    },
    {
        "path": "/db/_schema/{table_name}",
        "description": "Operations for per table administration.",
        "operations": [
            {
                "method": "GET",
                "summary": "describeTable() - Retrieve table definition for the given table.",
                "nickname": "describeTable",
                "event_name": ["db._schema.{table_name}.describe", "db._schema.table_described"],
                "type": "TableSchema",
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "refresh",
                        "description": "Refresh any cached copy of the schema.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ],
                "notes": "This describes the table, its fields and relations to other tables."
            },
            {
                "method": "POST",
                "summary": "createTable() - Create a table with the given properties and fields.",
                "nickname": "createTable",
                "type": "Success",
                "event_name": ["db._schema.{table_name}.create", "db._schema.table_created"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "schema",
                        "description": "Array of table properties and fields definitions.",
                        "allowMultiple": false,
                        "type": "TableSchema",
                        "paramType": "body",
                        "required": true
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ],
                "notes": "Post data should be an array of field properties for a single record or an array of fields."
            },
            {
                "method": "PUT",
                "summary": "replaceTable() - Update (replace) a table with the given properties.",
                "nickname": "replaceTable",
                "type": "Success",
                "event_name": ["db._schema.{table_name}.alter", "db._schema.table_altered"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "schema",
                        "description": "Array of field definitions.",
                        "allowMultiple": false,
                        "type": "TableSchema",
                        "paramType": "body",
                        "required": true
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ],
                "notes": "Post data should be an array of field properties for a single record or an array of fields."
            },
            {
                "method": "PATCH",
                "summary": "updateTable() - Update (patch) a table with the given properties.",
                "nickname": "updateTable",
                "type": "Success",
                "event_name": ["db._schema.{table_name}.alter", "db._schema.table_altered"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "schema",
                        "description": "Array of field definitions.",
                        "allowMultiple": false,
                        "type": "TableSchema",
                        "paramType": "body",
                        "required": true
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ],
                "notes": "Post data should be an array of field properties for a single record or an array of fields."
            },
            {
                "method": "DELETE",
                "summary": "deleteTable() - Delete (aka drop) the given table.",
                "nickname": "deleteTable",
                "type": "Success",
                "event_name": ["db._schema.{table_name}.drop", "db._schema.table_dropped"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ],
                "notes": "Careful, this drops the database table and all of its contents."
            }
        ]
    },
    {
        "path": "/db/_schema/{table_name}/{field_name}",
        "description": "Operations for single field administration.",
        "operations": [
            {
                "method": "GET",
                "summary": "describeField() - Retrieve the definition of the given field for the given table.",
                "nickname": "describeField",
                "type": "FieldSchema",
                "event_name": ["db._schema.{table_name}.{field_name}.describe", "db._schema.{table_name}.field_described"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "field_name",
                        "description": "Name of the field to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "refresh",
                        "description": "Refresh any cached copy of the schema.",
                        "allowMultiple": false,
                        "type": "boolean",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ],
                "notes": "This describes the field and its properties."
            },
            {
                "method": "PUT",
                "summary": "replaceField() - Update one record by identifier.",
                "nickname": "replaceField",
                "type": "Success",
                "event_name": ["db._schema.{table_name}.{field_name}.alter", "db._schema.{table_name}.field_altered"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "field_name",
                        "description": "Name of the field to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "properties",
                        "description": "Array of field properties.",
                        "allowMultiple": false,
                        "type": "FieldSchema",
                        "paramType": "body",
                        "required": true
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ],
                "notes": "Post data should be an array of field properties for the given field."
            },
            {
                "method": "PATCH",
                "summary": "updateField() - Update one record by identifier.",
                "nickname": "updateField",
                "type": "Success",
                "event_name": ["db._schema.{table_name}.{field_name}.alter", "db._schema.{table_name}.field_altered"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "field_name",
                        "description": "Name of the field to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "properties",
                        "description": "Array of field properties.",
                        "allowMultiple": false,
                        "type": "FieldSchema",
                        "paramType": "body",
                        "required": true
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ],
                "notes": "Post data should be an array of field properties for the given field."
            },
            {
                "method": "DELETE",
                "summary": "deleteField() - Remove the given field from the given table.",
                "nickname": "deleteField",
                "type": "Success",
                "event_name": ["db._schema.{table_name}.{field_name}.drop", "db._schema.{table_name}.field_dropped"],
                "parameters": [
                    {
                        "name": "table_name",
                        "description": "Name of the table to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "field_name",
                        "description": "Name of the field to perform operations on.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ],
                "notes": "Careful, this drops the database table field/column and all of its contents."
            }
        ]
    },
    {
        "path": "/db/_proc",
        "operations": [
            {
                "method": "GET",
                "summary": "getStoredProcs() - List callable stored procedures.",
                "nickname": "getStoredProcs",
                "notes": "List the names of the available stored procedures on this database. ",
                "type": "Resources",
                "event_name": ["db._proc.list"],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            }
        ],
        "description": "Operations for retrieving callable stored procedures."
    },
    {
        "path": "/db/_proc/{procedure_name}",
        "operations": [
            {
                "method": "GET",
                "summary": "callStoredProc() - Call a stored procedure.",
                "nickname": "callStoredProc",
                "notes": "Call a stored procedure with no parameters. Set an optional wrapper for the returned data set. ",
                "type": "StoredProcResponse",
                "event_name": ["db._proc.{procedure_name}.call", "db._proc.procedure_called"],
                "parameters": [
                    {
                        "name": "procedure_name",
                        "description": "Name of the stored procedure to call.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "wrapper",
                        "description": "Add this wrapper around the expected data set before returning.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            },
            {
                "method": "POST",
                "summary": "callStoredProcWithParams() - Call a stored procedure.",
                "nickname": "callStoredProcWithParams",
                "notes": "Call a stored procedure with parameters. Set an optional wrapper and schema for the returned data set. ",
                "type": "StoredProcResponse",
                "event_name": ["db._proc.{procedure_name}.call", "db._proc.procedure_called"],
                "parameters": [
                    {
                        "name": "procedure_name",
                        "description": "Name of the stored procedure to call.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "description": "Data containing in and out parameters to pass to procedure.",
                        "allowMultiple": false,
                        "type": "StoredProcRequest",
                        "paramType": "body",
                        "required": true
                    },
                    {
                        "name": "wrapper",
                        "description": "Add this wrapper around the expected data set before returning.",
                        "allowMultiple": false,
                        "type": "string",
                        "paramType": "query",
                        "required": false
                    }
                ],
                "responseMessages": [
                    {
                        "code": 400,
                        "message": "Bad Request - Request does not have a valid format, all required parameters, etc."
                    },
                    {
                        "code": 401,
                        "message": "Unauthorized Access - No currently valid session available."
                    },
                    {
                        "code": 404,
                        "message": "Not Found - Resource not found"
                    },
                    {
                        "code": 500,
                        "message": "System Error - Specific reason is included in the error message"
                    }
                ]
            }
        ],
        "description": "Operations for SQL database stored procedures."
    }
], "models": {
    "ComponentList": {
        "id": "ComponentList",
        "properties": {
            "resource": {
                "type": "Array",
                "description": "Array of accessible components available by this service.",
                "items": {
                    "type": "string"
                }
            }
        }
    },
    "Resource": {
        "id": "Resource",
        "properties": {
            "name": {
                "type": "string",
                "description": "Name of the resource."
            }
        }
    },
    "Resources": {
        "id": "Resources",
        "properties": {
            "resource": {
                "type": "Array",
                "description": "Array of resources available by this service.",
                "items": {
                    "$ref": "Resource"
                }
            }
        }
    },
    "Success": {
        "id": "Success",
        "properties": {
            "success": {
                "type": "boolean",
                "description": "True when API call was successful, false or error otherwise."
            }
        }
    },
    "Tables": {
        "id": "Tables",
        "properties": {
            "table": {
                "type": "array",
                "description": "Array of tables and their properties.",
                "items": {
                    "$ref": "Table"
                }
            }
        }
    },
    "Table": {
        "id": "Table",
        "properties": {
            "name": {
                "type": "string",
                "description": "Name of the table."
            }
        }
    },
    "RecordRequest": {
        "id": "RecordRequest",
        "properties": {
            "id": {
                "type": "integer",
                "format": "int32",
                "description": "Sample identifier of this record."
            }
        }
    },
    "RecordsRequest": {
        "id": "RecordsRequest",
        "properties": {
            "record": {
                "type": "array",
                "description": "Array of records.",
                "items": {
                    "$ref": "RecordRequest"
                }
            }
        }
    },
    "IdsRequest": {
        "id": "IdsRequest",
        "properties": {
            "ids": {
                "type": "array",
                "description": "Array of record identifiers.",
                "items": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        }
    },
    "IdsRecordRequest": {
        "id": "IdsRecordRequest",
        "properties": {
            "record": {
                "type": "RecordRequest",
                "description": "A single record, array of fields, used to modify existing records."
            },
            "ids": {
                "type": "array",
                "description": "Array of record identifiers.",
                "items": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        }
    },
    "FilterRequest": {
        "id": "FilterRequest",
        "properties": {
            "filter": {
                "type": "string",
                "description": "SQL or native filter to determine records where modifications will be applied."
            },
            "params": {
                "type": "array",
                "description": "Array of name-value pairs, used for parameter replacement on filters.",
                "items": {
                    "type": "string"
                }
            }
        }
    },
    "FilterRecordRequest": {
        "id": "FilterRecordRequest",
        "properties": {
            "record": {
                "type": "RecordRequest",
                "description": "A single record, array of fields, used to modify existing records."
            },
            "filter": {
                "type": "string",
                "description": "SQL or native filter to determine records where modifications will be applied."
            },
            "params": {
                "type": "array",
                "description": "Array of name-value pairs, used for parameter replacement on filters.",
                "items": {
                    "type": "string"
                }
            }
        }
    },
    "GetRecordsRequest": {
        "id": "GetRecordsRequest",
        "properties": {
            "record": {
                "type": "array",
                "description": "Array of records.",
                "items": {
                    "$ref": "RecordRequest"
                }
            },
            "ids": {
                "type": "array",
                "description": "Array of record identifiers.",
                "items": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "filter": {
                "type": "string",
                "description": "SQL or native filter to determine records where modifications will be applied."
            },
            "params": {
                "type": "array",
                "description": "Array of name-value pairs, used for parameter replacement on filters.",
                "items": {
                    "type": "string"
                }
            }
        }
    },
    "RecordResponse": {
        "id": "RecordResponse",
        "properties": {
            "id": {
                "type": "integer",
                "format": "int32",
                "description": "Sample identifier of this record."
            }
        }
    },
    "RecordsResponse": {
        "id": "RecordsResponse",
        "properties": {
            "record": {
                "type": "array",
                "description": "Array of system user records.",
                "items": {
                    "$ref": "RecordResponse"
                }
            },
            "meta": {
                "type": "Metadata",
                "description": "Array of metadata returned for GET requests."
            }
        }
    },
    "Metadata": {
        "id": "Metadata",
        "properties": {
            "schema": {
                "type": "Array",
                "description": "Array of table schema.",
                "items": {
                    "type": "string"
                }
            },
            "count": {
                "type": "integer",
                "format": "int32",
                "description": "Record count returned for GET requests."
            }
        }
    },
    "TableSchemas": {
        "id": "TableSchemas",
        "properties": {
            "table": {
                "type": "Array",
                "description": "An array of table definitions.",
                "items": {
                    "$ref": "TableSchema"
                }
            }
        }
    },
    "TableSchema": {
        "id": "TableSchema",
        "properties": {
            "name": {
                "type": "string",
                "description": "Identifier/Name for the table."
            },
            "label": {
                "type": "string",
                "description": "Displayable singular name for the table."
            },
            "plural": {
                "type": "string",
                "description": "Displayable plural name for the table."
            },
            "primary_key": {
                "type": "string",
                "description": "Field(s), if any, that represent the primary key of each record."
            },
            "name_field": {
                "type": "string",
                "description": "Field(s), if any, that represent the name of each record."
            },
            "field": {
                "type": "Array",
                "description": "An array of available fields in each record.",
                "items": {
                    "$ref": "FieldSchema"
                }
            },
            "related": {
                "type": "Array",
                "description": "An array of available relationships to other tables.",
                "items": {
                    "$ref": "RelatedSchema"
                }
            }
        }
    },
    "FieldSchema": {
        "id": "FieldSchema",
        "properties": {
            "name": {
                "type": "string",
                "description": "The API name of the field."
            },
            "label": {
                "type": "string",
                "description": "The displayable label for the field."
            },
            "type": {
                "type": "string",
                "description": "The abstract data type for this field."
            },
            "db_type": {
                "type": "string",
                "description": "The native database type used for this field."
            },
            "length": {
                "type": "integer",
                "format": "int32",
                "description": "The maximum length allowed (in characters for string, displayed for numbers)."
            },
            "precision": {
                "type": "integer",
                "format": "int32",
                "description": "Total number of places for numbers."
            },
            "scale": {
                "type": "integer",
                "format": "int32",
                "description": "Number of decimal places allowed for numbers."
            },
            "default_value": {
                "type": "string",
                "description": "Default value for this field."
            },
            "required": {
                "type": "boolean",
                "description": "Is a value required for record creation."
            },
            "allow_null": {
                "type": "boolean",
                "description": "Is null allowed as a value."
            },
            "fixed_length": {
                "type": "boolean",
                "description": "Is the length fixed (not variable)."
            },
            "supports_multibyte": {
                "type": "boolean",
                "description": "Does the data type support multibyte characters."
            },
            "auto_increment": {
                "type": "boolean",
                "description": "Does the integer field value increment upon new record creation."
            },
            "is_primary_key": {
                "type": "boolean",
                "description": "Is this field used as/part of the primary key."
            },
            "is_foreign_key": {
                "type": "boolean",
                "description": "Is this field used as a foreign key."
            },
            "ref_table": {
                "type": "string",
                "description": "For foreign keys, the referenced table name."
            },
            "ref_field": {
                "type": "string",
                "description": "For foreign keys, the referenced table field name."
            },
            "validation": {
                "type": "Array",
                "description": "validations to be performed on this field.",
                "items": {
                    "type": "string"
                }
            },
            "value": {
                "type": "Array",
                "description": "Selectable string values for client menus and picklist validation.",
                "items": {
                    "type": "string"
                }
            }
        }
    },
    "RelatedSchema": {
        "id": "RelatedSchema",
        "properties": {
            "name": {
                "type": "string",
                "description": "Name of the relationship."
            },
            "type": {
                "type": "string",
                "description": "Relationship type - belongs_to, has_many, many_many."
            },
            "ref_table": {
                "type": "string",
                "description": "The table name that is referenced by the relationship."
            },
            "ref_field": {
                "type": "string",
                "description": "The field name that is referenced by the relationship."
            },
            "join": {
                "type": "string",
                "description": "The intermediate joining table used for many_many relationships."
            },
            "field": {
                "type": "string",
                "description": "The current table field that is used in the relationship."
            }
        }
    },
    "StoredProcResponse": {
        "id": "StoredProcResponse",
        "properties": {
            "_wrapper_if_supplied_": {
                "type": "Array",
                "description": "Array of returned data.",
                "items": {
                    "type": "string"
                }
            },
            "_out_param_name_": {
                "type": "string",
                "description": "Name and value of any given output parameter."
            }
        }
    },
    "StoredProcRequest": {
        "id": "StoredProcRequest",
        "properties": {
            "params": {
                "type": "array",
                "description": "Optional array of input and output parameters.",
                "items": {
                    "$ref": "StoredProcParam"
                }
            },
            "schema": {
                "type": "StoredProcResultSchema",
                "description": "Optional name to type pairs to be applied to returned data."
            },
            "wrapper": {
                "type": "string",
                "description": "Add this wrapper around the expected data set before returning, same as URL parameter."
            }
        }
    },
    "StoredProcParam": {
        "id": "StoredProcParam",
        "properties": {
            "name": {
                "type": "string",
                "description": "Name of the parameter, required for OUT and INOUT types, must be the same as the stored procedure's parameter name."
            },
            "param_type": {
                "type": "string",
                "description": "Parameter type of IN, OUT, or INOUT, defaults to IN."
            },
            "value": {
                "type": "string",
                "description": "Value of the parameter, used for the IN and INOUT types, defaults to NULL."
            },
            "type": {
                "type": "string",
                "description": "For INOUT and OUT parameters, the requested type for the returned value, i.e. integer, boolean, string, etc. Defaults to value type for INOUT and string for OUT."
            },
            "length": {
                "type": "integer",
                "format": "int32",
                "description": "For INOUT and OUT parameters, the requested length for the returned value. May be required by some database drivers."
            }
        }
    },
    "StoredProcResultSchema": {
        "id": "StoredProcResultSchema",
        "properties": {
            "_field_name_": {
                "type": "string",
                "description": "The name of the returned element where the value is set to the requested type for the returned value, i.e. integer, boolean, string, etc."
            }
        }
    }
}}

